-- Creating table for coutries
CREATE TABLE public.countries(
    country_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1),
    name VARCHAR(60) NOT NULL,
    iso VARCHAR(2) NOT NULL,
    phone_code VARCHAR(16) NOT NULL,
    currency_code VARCHAR(3) NOT NULL,
    CONSTRAINT pk_countries PRIMARY KEY (country_id)
);

-- Creating table for states
CREATE TABLE public.states(
    state_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1),
    country_id INTEGER NOT NULL,
    name VARCHAR(60) NOT NULL,
    code VARCHAR(10) NOT NULL,
    CONSTRAINT pk_states PRIMARY KEY (state_id),
    CONSTRAINT fk_states_country_id_countries FOREIGN KEY (country_id) REFERENCES public.countries (country_id)
);

-- Creating table for cities
CREATE TABLE public.cities(
    city_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1),
    state_id INTEGER NOT NULL,
    name VARCHAR(70) NOT NULL,
    CONSTRAINT pk_cities PRIMARY KEY (city_id),
    CONSTRAINT fk_cities_state_id_states FOREIGN KEY (state_id) REFERENCES public.states (state_id)
);

-- Converting json to relational data.
DO $$
DECLARE
	record_country RECORD;
	record_state RECORD;
	record_city RECORD;
	
	inserted_country_id INTEGER;
	inserted_state_id INTEGER;
	
	cursor_countries CURSOR 
		FOR
		SELECT countries ->> 'id' AS id,
		countries ->> 'name' AS name,
        countries ->> 'iso2' as iso,
		countries ->> 'phone_code' as phone_code,
		countries ->> 'currency' as currency_code,
		CAST(countries ->> 'states' AS JSON) AS states
		FROM public.countries_states_cities csc
		CROSS JOIN json_array_elements(csc._json) AS countries;
		
	cursor_states CURSOR(_state JSON)
		FOR
		SELECT states ->> 'id' AS id,
		REPLACE(states ->> 'name',' Province','') AS name,
		states ->> 'state_code' AS code,
		CAST(states ->> 'cities' AS JSON) AS cities
		FROM json_array_elements(_state) AS states
		ORDER BY states ->> 'state_code';
		
	cursor_cities CURSOR(_city JSON)
		FOR
		SELECT cities ->> 'id' AS id,
		cities ->> 'name' AS name
		FROM json_array_elements(_city) AS cities
		WHERE cities ->> 'name' not like '%İlçesi%';
BEGIN
	-- COUNTRY(ÜLKE) BEGIN
	OPEN cursor_countries;
		LOOP
			FETCH cursor_countries INTO record_country;
			EXIT WHEN NOT FOUND;
			
			--RAISE NOTICE '-> %', record_country.name;
			INSERT INTO public.countries (name, iso, phone_code, currency_code)
            		VALUES (record_country.name, record_country.iso, record_country.phone_code, record_country.currency_code)
            		RETURNING country_id INTO inserted_country_id;
			
			-- STATE(İL) BEGIN
			OPEN cursor_states(record_country.states);
			LOOP
				FETCH cursor_states INTO record_state;
				EXIT WHEN NOT FOUND;
				
				--RAISE NOTICE '	-> %', record_state.name;
                		INSERT INTO public.states (country_id, name, code)
                		VALUES (inserted_country_id, record_state.name, record_state.code)
                		RETURNING state_id INTO inserted_state_id;
				
				-- CITY(İLÇE) BEGIN
				OPEN cursor_cities(record_state.cities);
				LOOP
					FETCH cursor_cities INTO record_city;
					EXIT WHEN NOT FOUND;
					
					--RAISE NOTICE '		-> %', record_city.name;
                    			INSERT INTO public.cities (state_id, name)
				    	VALUES(inserted_state_id, record_city.name);
					
				END LOOP;
				CLOSE cursor_cities;
				-- CITY(İLÇE) END
				
			END LOOP;
			CLOSE cursor_states;
			-- STATE(İL) END
			
		END LOOP;
	CLOSE cursor_countries;
	-- COUNTRY(ÜLKE) END
END; $$;